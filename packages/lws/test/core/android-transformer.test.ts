import { EOL } from "os";
import * as assert from "assert";
import Transformer from "../../src/core/transformer";
const transformer = Transformer.android;

describe("AndroidTransformer.transformComment", () => {
  it("transforms comment", () => {
    const result = transformer.transformComment("un commentaire");

    assert.strictEqual("    <!-- un commentaire -->", result);
  });
});

describe("AndroidTransformer.transformKeyValue", () => {
  it("transforms key value", () => {
    const line = transformer.transformKeyValue("ma_cle", "La valeur");
    assert.strictEqual('    <string name="ma_cle">La valeur</string>', line);
  });

  it("transforms multiple format", () => {
    const line = transformer.transformKeyValue("ma_cle", "La valeur %s et %s");
    assert.strictEqual(
      '    <string name="ma_cle">La valeur %1$s et %2$s</string>',
      line
    );
  });

  it("transforms single format", () => {
    const line = transformer.transformKeyValue("ma_cle", "La valeur %s");
    assert.strictEqual('    <string name="ma_cle">La valeur %1$s</string>', line);
  });

  it("escapes amp", () => {
    const line = transformer.transformKeyValue("ma_cle", "Ma & valeur");
    assert.strictEqual('    <string name="ma_cle">Ma &amp; valeur</string>', line);
  });

  it("replaces three point with ellipsis character", () => {
    const line = transformer.transformKeyValue("ma_cle", "Ma valeur...");
    assert.strictEqual('    <string name="ma_cle">Ma valeur&#8230;</string>', line);
  });

  it("replaces three point in the middle with ellipsis character", () => {
    const line = transformer.transformKeyValue(
      "ma_cle",
      "Ma valeur...à remplacer"
    );
    assert.strictEqual(
      '    <string name="ma_cle">Ma valeur&#8230;à remplacer</string>',
      line
    );
  });

  it("should not replaces four point with ellipsis character", () => {
    const line = transformer.transformKeyValue("ma_cle", "Ma valeur....");
    assert.strictEqual('    <string name="ma_cle">Ma valeur....</string>', line);
  });
});

describe("AndroidTransformer.insert", () => {
  it("should create resources tag when empty", () => {
    const xmlHeader = '<?xml version="1.0" encoding="utf-8"?>';
    const result = transformer.insert("", "à insérer");
    assert.strictEqual(
      xmlHeader +
        EOL +
        "<resources>" +
        EOL +
        transformer.AUTOGENERATED_TAG +
        EOL +
        "à insérer" +
        EOL +
        "</resources>",
      result
    );
  });

  it("should insert before end tag when has resource tag", () => {
    const result = transformer.insert(
      "<resources>" + EOL + "aa" + EOL + "</resources>",
      "à insérer"
    );
    assert.strictEqual(
      "<resources>" +
        EOL +
        "aa" +
        EOL +
        transformer.AUTOGENERATED_TAG +
        EOL +
        "à insérer" +
        EOL +
        "</resources>",
      result
    );
  });

  it("should replace auto generated tag when available", () => {
    const result = transformer.insert(
      "<resources>" +
        EOL +
        "aa" +
        EOL +
        transformer.AUTOGENERATED_TAG +
        EOL +
        "à effacer" +
        EOL +
        "</resources>",
      "à insérer"
    );
    assert.strictEqual(
      "<resources>" +
        EOL +
        "aa" +
        EOL +
        transformer.AUTOGENERATED_TAG +
        EOL +
        "à insérer" +
        EOL +
        "</resources>",
      result
    );
  });

  it("inserts after same as before if new value dont change", () => {
    const before =
      "<resources>" +
      EOL +
      "aa" +
      EOL +
      transformer.AUTOGENERATED_TAG +
      EOL +
      "before" +
      EOL +
      "</resources>";
    const result = transformer.insert(before, "before");
    assert.strictEqual(before, result);
  });
});
